---
name: main

# Automatically cancel a previous run.
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CONDA_EXE: mamba

on:
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - '*'
jobs:

  run-tests:

    name: Run tests for ${{ matrix.os }} on ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.11']

      steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          auto-update-conda: false
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,nodefaults
          miniforge-variant: Mambaforge

      - name: Install core dependencies.
        shell: bash -l {0}
        run: mamba install -c conda-forge tox-conda coverage

      # Unit, integration, and end-to-end tests.

      - name: Run unit tests and doctests.
        shell: bash -l {0}
        run: tox -e pytest -- -m "unit or (not integration and not end_to_end)" --cov=src --cov=tests --cov-report=xml -n auto

      - name: Upload coverage report for unit tests and doctests.
        if: runner.os == 'Linux' && matrix.python-version == '3.8'
        shell: bash -l {0}
        run: bash <(curl -s https://codecov.io/bash) -F unit -c
    
    
    # steps:
    #   - uses: actions/checkout@v3
    #   - name: create build environment
    #     uses: mamba-org/provision-with-micromamba@main
    #     with:
    #       environment-file: environment.yml
    #       environment-name: "{{ cookiecutter.project_slug }}"
    #       cache-env: true
    #       extra-specs: |
    #         python=${{ matrix.python-version }}
    #   - name: run pytest
    #     shell: bash -l {0}
    #     run: |
    #       micromamba activate gettsim
    #       pytest --cov-report=xml --cov=./ --ignore=dashboard/
    #   - name: Upload coverage report.
    #     if: runner.os == 'Linux' && matrix.python-version == '3.11'
    #     uses: codecov/codecov-action@v3
        # with:
        #   token: ${{ secrets.CODECOV_TOKEN }}
